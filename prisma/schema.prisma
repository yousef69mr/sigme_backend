// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  // id        Int      @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  phone    String @unique

  avatar String?
  gender String?
  role   UserRole? @default(USER)

  alertMode   AlertMode? @relation(fields: [alertModeId], references: [id], onDelete: SetNull)
  alertModeId String?    @db.ObjectId

  devices       DeviceInfo[]
  userLocations UserLocation[]
  contacts      Contact[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([alertModeId])
}

model UserLocation {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  label      String?
  notes      String? // Optional user-defined notes
  userId     String  @db.ObjectId
  locationId String  @db.ObjectId

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, locationId, label])
  @@index([userId])
  @@index([locationId])
}

model Location {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  accuracy  Float?

  userLocations    UserLocation[]
  connectivityLogs ConnectivityInfo[]

  @@unique([latitude, longitude])
}

model ConnectivityInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  connectivityType String // 'wifi', 'mobile', 'none', etc.
  isConnected      Boolean
  ipAddress        String? // e.g., 192.168.1.2
  wifiName         String? // SSID (if applicable)
  wifiBSSID        String? // BSSID (MAC address of AP)

  device   DeviceInfo @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId String     @db.ObjectId // foreign key to DeviceInfo

  locationId String?   @db.ObjectId
  location   Location? @relation(fields: [locationId], references: [id])

  mobileNetworkInfo   MobileNetworkInfo? @relation(fields: [mobileNetworkInfoId], references: [id])
  mobileNetworkInfoId String?            @db.ObjectId

  timestamp DateTime @default(now())

  @@index([deviceId])
  @@index([mobileNetworkInfoId])
  @@index([locationId])
}

model MobileNetworkInfo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  carrier     String? // e.g., "STC"
  networkType String? // e.g., "LTE", "5G"
  signalLevel Int? // 0â€“4
  signalDbm   Int? // e.g., -85 dBm
  asuLevel    Int? // optional
  mcc         String? // Mobile Country Code
  mnc         String? // Mobile Network Code

  ConnectivityInfo ConnectivityInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeviceInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  platform         String // 'android', 'ios', 'web', etc.
  model            String?
  brand            String?
  manufacturer     String?
  systemName       String?
  systemVersion    String?
  sdkInt           Int? // Only for Android
  isPhysicalDevice Boolean?

  lastPinged DateTime? // updated on each ping

  deviceId            String? // identifierForVendor or Android ID
  userAgent           String? // Only for Web
  hardwareConcurrency Int? // Only for Web
  deviceMemory        Int? // Only for Web (in GB)

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.ObjectId // optional link to your User model

  connectivityLogs ConnectivityInfo[] // One-to-many relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, deviceId])
  @@index([userId])
}

enum ContactTypeEnum {
  EMERGENCY
  FAVORITE
}

model Contact {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactName String?
  phone       String
  email       String

  type ContactTypeEnum @default(EMERGENCY)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([type, userId, phone, email])
  @@index([userId])
}

model AlertMode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key         String  @unique
  label       String
  description String?

  users User[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
